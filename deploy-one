#!/bin/sh

declare -A conf_version
declare -A conf_url
declare -A home_dict

function del_env
{
	local key=$1

	sed -i "/export $key/d" $profile
}

function check_profile_path
{
	local path=$1

	grep "PATH=$path:" $profile > /dev/null || \
		grep "PATH=.*:$path$" $profile > /dev/null || \
			grep "PATH=.*:$path:" $profile > /dev/null

	return $?
}

function add_env
{
	local key=$1
	local val=$2

	echo "export $key=$val" >> $profile
	#grep -w $key $profile > /dev/null
	#if [ $? -eq 0 ]; then
	#	sed -i "s:$key=.*:$key=$val:" $profile
	#else
	#	echo "export $key=$val" >> $profile
	#fi

	#if [ $? -ne 0 ]; then
	#	echo "fail to export $key!"
	#	exit 1
	#fi
}

function add_path
{
	local path=$1

	echo "export PATH=$path:\$PATH" >> $profile
	#check_profile_path $path || echo "export PATH=$path:\$PATH" >> $profile
	#check_profile_path $path || exit 1
}

function del_path
{
	local path=$1
	check_profile_path $path && sed -i "#PATH=.*$path#d" $profile

	local NEW_PATH=`echo $PATH | sed -e 's#$path:##' | sed -e 's#:$path##'`
}

function download_and_extract
{
	local app=$1
	local downloads=`mktemp -d`
	local url=${conf_url[$app]}
	local dest=${home_dict[$app]}
	local tarball=`basename $url`

	if [ -e $dest ]; then
		echo "$dest exists!"
		return 1
	fi
	#scp $url $downloads || return 1
	cd $downloads
	echo -n "extracting $tarball ."
	tar xf $url || return 1
	echo -n "."
 	mv * $dest || return 1
	echo -n "."
	rm -rf $downloads
	echo " done"
	cd - > /dev/null

	return 0
}

function execute
{
	func=$1

	#echo "*****************************************"
	echo "executing $func() ..."
	#echo "*****************************************"

	$func
	if [ $? -ne 0 ]; then
		echo "fail to run $func!"
		exit 1
	fi
}

# FIXME
version=1.0.0

if [ $UID -ne 0 ]; then
	echo "pls run as root!"
	exit 1
fi

cd `dirname $0`
top=$PWD

slaves=()

while [ $# -gt 0 ]
do
	case $1 in
	-m|--master)
		master=$2
		shift
		;;
	-s|--slaves)
		slaves=(${2//,/ })
		shift
		;;
	-i|--id)
		this=$2
		shift
		;;
	-k|--key)
		pk=$2
		shift
		;;
	*)
		echo "option '$1' not supported!"
		echo "usage: `basename $0 [-m|--master <host name>] [-s|--slaves <slave list>]`"
		exit 1
	esac
	shift
done

#hadoop_repo="repo.maxwit.com:/mnt/witpub/cloud/apache"
hadoop_repo="/mnt/witpub/cloud/apache"

hadoop_user=hadoop
hadoop_user_home="/var/lib/$hadoop_user"
data_root="$hadoop_user_home/data"

util_root="/opt/util"
mdh_root="/opt/mdh"

echo "###########################################"
echo "                 MDH v$version"
echo "    MaxWit Distribution of Apache Hadoop"
echo "###########################################"
echo

if [ "${#slaves[@]}" -gt 0 ]; then
	if [ -z "$master" ]; then
		echo "master not specified!"
		echo "usage: xxx"
		exit 1
	fi
	if [ -z "$pk" -o ! -e "$pk" ]; then
		echo "pk not specified!"
		echo "usage: xxx"
		exit 1
	fi
	mode="cluster"
else
	if [ -z "$master" ]; then
		master="localhost"
	fi
	mode="pseudo"
fi

hosts=($master ${slaves[@]})

# FIXME: to be removed
. configs/config-hadoop-2.7

conf_url[hive]=$hadoop_repo/apache-hive-${conf_version[hive]}-bin.tar.gz
conf_url[hadoop]=$hadoop_repo/hadoop-${conf_version[hadoop]}.tar.gz
conf_url[hbase]=$hadoop_repo/hbase-${conf_version[hbase]}-bin.tar.gz
conf_url[spark]=$hadoop_repo/spark-${conf_version[spark]}-bin-hadoop2.6.tgz
conf_url[zookeeper]=$hadoop_repo/zookeeper-${conf_version[zookeeper]}.tar.gz
conf_url[pig]=$hadoop_repo/pig-${conf_version[pig]}.tar.gz

# FIX the url
conf_url[java]=/mnt/witpub/devel/java/jdk/jdk-${conf_version[java]}-linux-x64.tar.gz
conf_url[scala]=/mnt/witpub/devel/scala/scala-${conf_version[scala]}.tgz

if [ -e /etc/redhat-release ]; then
	profile="/etc/bash_profile.d"
else
	profile="/etc/profile.d"
fi
profile="$profile/mdh.sh"

log="/tmp/mdh-`date +%H%M%S`.log"
echo "# MDH Log (`date`)" > $log
echo >> $log

app_seq=""
app_rev=""

for app in hadoop zookeeper hbase spark
do
	if [ -n "${conf_version[$app]}" ]; then
		app_seq="$app_seq $app"
		app_rev="$app $app_rev"

		home_dict[$app]=$mdh_root/$app

		module="module/$app.sh"
		if [ ! -e $module ]; then
			echo "$module does not exists!"
			exit 1
		fi
		. $module
	fi
done

util_list=""
for util in java scala pig
do
	if [ -n "${conf_version[$util]}" ]; then
		home_dict[$util]=$util_root/$util
		util_list="$util_list $util"
	fi
done

# FIXME
destroy=/opt/destroy-one

cat > $destroy << EOF
#!/bin/sh

echo "MDH destroying ..."

mdh_root=$mdh_root
util_root=$util_root
data_root=$data_root
hadoop_user=$hadoop_user
app_rev=$app_rev
profile=$profile
EOF

cat $top/destroy-one >> $destroy
chmod a+x $destroy

# do deploy
echo "MDH will be installed to '$mdh_root'"
echo

grep "^$hadoop_user:" /etc/passwd && \
{
	echo "user '$hadoop_user' already exists!"
	exit 1
}

echo "create user '$hadoop_user' ..."
useradd -m -d $hadoop_user_home -s /bin/bash -c "Hadoop" $hadoop_user

sudo -i -u $hadoop_user mkdir -m 700 .ssh
if [ ${hosts[$this]} == $master ]; then
	#if [ $mode = 'cluster' ]; then
	if [ -n "$pk" ]; then
		sudo -i -u $hadoop_user cp $pk .ssh && \
		sudo -i -u $hadoop_user cp ${pk%.pub} .ssh || exit 1
	else
		sudo -u $hadoop_user ssh-keygen -P '' -f $hadoop_user_home/.ssh/id_rsa || exit 1
	fi
	sudo -i -u $hadoop_user cp .ssh/id_rsa.pub .ssh/authorized_keys
	if [ $mode != 'cluster' ]; then
		sudo -i -u $hadoop_user ssh -o StrictHostKeyChecking=no $master pwd
	fi
else
	sudo -i -u $hadoop_user cp $pk .ssh/authorized_keys
fi
#sudo -i -u $hadoop_user chmod 600 .ssh/*
echo

sudo -u $hadoop_user mkdir -p $data_root || exit 1

mkdir -p $mdh_root || exit 1
mkdir -p $util_root || exit 1

for util in $util_list
do
	if ! download_and_extract $util; then
		userdel -r $hadoop_user
		exit 1
	fi

	home=`echo $util | tr a-z A-Z`_HOME
	add_env $home ${home_dict[$util]}
	add_path "\$$home/bin"

	sudo -i -u $hadoop_user $util -version
	echo
done


for app in $app_seq
do
	if ! download_and_extract $app; then
		rm -rf $util_root
		rm -f $profile
		userdel -r $hadoop_user
		exit 1
	fi
	cd ${home_dict[$app]} || exit 1
	execute ${app}_deploy || exit 1

	service=/etc/init.d/$app
	home=`echo $app | tr a-z A-Z`_HOME
	cat > $service << EOF
#!/bin/sh
#
#

hadoop_user=$hadoop_user
$home=${home_dict[$app]}

EOF
	cat $top/service/$app >> $service
	chmod +x $service

	echo
done

echo "MDH deployed successfully!"
echo
