#!/bin/sh

cd `dirname $0`
TOP=$PWD

log="/tmp/mdh.log"

echo "# MDH Log" > $log
date >> $log
echo >> $log

function ssh_setup
{
	kt="rsa"
	kf="id_$kt"

	if [ ! -f ~/.ssh/${kf} ]; then
		ssh-keygen -P '' -f ~/.ssh/${kf}
	fi

	#key=`cat ~/.ssh/${kf}.pub`
	#grep "$key" ~/.ssh/authorized_keys > /dev/null 2>&1|| echo "$key" >> ~/.ssh/authorized_keys

	total=${#hosts[@]}
	count=1

	for host in ${hosts[@]}
	do
		echo "Copying $kf [$count/$total]: $host ..."
		# TODO: no-interactive support
		ssh-copy-id $host

		((count++))
		echo
	done

	for host in ${hosts[@]}
	do
		ssh $host echo "login $host successfully!"
	done
	echo
}

if [ $# -ne 1 ]; then
	echo "usage: `basename $0` <init|deploy|destroy|test|start|stop>"
	exit 1
fi

cmd=$1

#while [ $# -gt 0 ]
#do
#	case $1 in
#	-i|--init)
#		init=1
#		;;
#	-d|--destroy)
#		destroy=1
#		;;
#	*)
#		echo "usage: `basename $0 [-d|--destroy] [-i|--init]`"
#		exit 1
#	esac
#
#	shift
#done

if [ -e ./.config ]; then
	. ./.config
fi

if [ -n "$config_slaves" ]; then
	if [ -n "$config_master" ]; then
		master=$config_master
	else
		master=`hostname`
		# TODO: check master
	fi
	mode="cluster"
else
	master='localhost'
	mode="pseudo"
fi

slaves=($config_slaves)
hosts=($master $config_slaves)

echo "MDH will run in $mode mode."
if [ $mode = 'cluster' ]; then
	echo "Cluster nodes:"
	i=0
	for host in ${hosts[@]}
	do
		((i++))
		echo "[$i] $host"
	done
fi
echo

if [ -n "$config_repo" ]; then
	repo="$config_repo"
else
	repo='/mnt/witpub/cloud/hadoop/'
fi

if [ -n "$config_data_root" ]; then
	data_root="$config_data_root"
else
	data_root="$HOME/data"
fi

apps=""

if [ -n "$config_hadoop" ]; then
	hadoop=$config_hadoop
	apps="hadoop"
fi

if [ -n "$config_hive" ]; then
	hive=$config_hive
	apps="$apps hive"
fi

if [ -n "$config_pig" ]; then
	pig=$config_pig
	apps="$apps pig"
fi

if [ -n "$config_zk" ]; then
	zk=$config_zk
	apps="$apps zookeeper"
fi

if [ -n "$config_hbase" ]; then
	hbase=$config_hbase
	apps="$apps hbase"
fi

if [ -n "$config_spark" ]; then
	spark=$config_spark
	apps="$apps spark"
fi

if [ $cmd = 'init' ]; then
	ssh_setup
	exit $?
fi

if [ -z "$JAVA_HOME" ]; then
	echo -e "JAVA_HOME not set!\n"
	exit 1
fi

if [ -e /etc/redhat-release ]; then
	profile="$HOME/.bash_profile"
else
	profile="$HOME/.profile"
fi

function add_env
{
	local key=$1
	local val=$2

	echo "export $key=$val" >> $profile
	#grep -w $key $profile > /dev/null
	#if [ $? -eq 0 ]; then
	#	sed -i "s:$key=.*:$key=$val:" $profile
	#else
	#	echo "export $key=$val" >> $profile
	#fi

	#if [ $? -ne 0 ]; then
	#	echo "fail to export $key!"
	#	exit 1
	#fi

	#eval export $key=$val
}

function del_env
{
	local key=$1

	sed -i "/export $key/d" $profile
	unset $key
}

function check_profile_path
{
	local path=$1

	grep "PATH=$path:" $profile > /dev/null || \
		grep "PATH=.*:$path$" $profile > /dev/null || \
			grep "PATH=.*:$path:" $profile > /dev/null

	return $?
}

function add_path
{
	local path=$1

	echo "export PATH=$path:\$PATH" >> $profile
	#check_profile_path $path || echo "export PATH=$path:\$PATH" >> $profile
	#check_profile_path $path || exit 1

	## FIXME
	#echo $PATH | grep -w $path || \
	#	eval export PATH="$path:\$PATH"
}

function del_path
{
	local path=$1
	check_profile_path $path && sed -i "#PATH=.*$path#d" $profile

	local NEW_PATH=`echo $PATH | sed -e 's#$path:##' | sed -e 's#:$path##'`
	eval export PATH=$NEW_PATH
}

function extract
{
	local pkg=$1
	local dir
	local tarball
	local ext

	if [ -n "$2" ]; then
		dir=$2
	else
		dir=$HOME
	fi

	for ext in tar.gz tar.bz2 tar.xz tgz
	do
		if [ -e $repo/$pkg.$ext ]; then
			tarball=$repo/$pkg.$ext
			break
		fi
	done

	if [ -z "$tarball" ]; then
		echo "$pkg not found!"
		return 1
	fi

	echo -n "extracting $pkg.$ext ... "
	tar xf $tarball -C $dir || return 1
	echo "done"
}

function execute
{
	func=$1

	echo "#########################################"
	echo "  executing $func() ..."
	echo "#########################################"

	$func
	if [ $? -ne 0 ]; then
		echo "fail to run $func!"
		exit 1
	fi

	echo
}

for app in $apps
do
	module="module/$app.sh"
	if [ ! -e $module ]; then
		echo "$module does not exists!"
		exit 1
	fi

	. $module
done

rev_apps=""
for app in $apps
do
	rev_apps="$app $rev_apps"
done

case $cmd in
deploy)
	for host in ${hosts[@]}
	do
		ssh $host mkdir -p $data_root || exit 1
	done
	echo

	for app in $apps
	do
		cd $TOP
		execute ${app}_deploy
		echo
	done
	echo
	;;
destroy)	
	for app in $rev_apps
	do
		cd $TOP
		execute ${app}_destroy
		echo
	done

	for host in ${hosts[@]}
	do
		ssh $host rm -rf $data_root
	done
	;;
start)
	for app in $apps
	do
		cd $TOP
		execute ${app}_start
		echo
	done
	;;
stop)
	for app in $rev_apps
	do
		cd $TOP
		execute ${app}_stop
		echo
	done
	;;
test)
	for app in $apps
	do
		cd $TOP
		execute ${app}_test
		echo
	done
	;;
*)
	echo "BUG!"
	exit 1
esac

echo "MDH deployed successfully!"
echo
